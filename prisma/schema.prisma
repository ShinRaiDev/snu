// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  items         Item[]
  warehouses    Warehouse[]
}

model Warehouse {
  id       String  @id @unique
  distance Float
  items    Item[]
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  // ItemsInWarehouse ItemsInWarehouse[]
}

model Item {
  id           String    @id @unique @default(cuid())
  name         String
  quantity     Int
  exportType   String
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  category     Category  @relation(fields: [categoryName], references: [name])
  country      String
  categoryName String
  warehouseid  String
  warehouse    Warehouse @relation(fields: [warehouseid], references: [id])
  // ItemsInWarehouse ItemsInWarehouse[]
}

model Category {
  name   String @unique
  volume Int
  items  Item[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
